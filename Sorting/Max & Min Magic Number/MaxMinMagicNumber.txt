Problem Description
Given an array of integers A of size N where N is even.

Divide the array into two subsets such that

1.Length of both subset is equal.
2.Each element of A occurs in exactly one of these subset.
Magic number = sum of absolute difference of corresponding elements of subset.

Note: You can reorder the position of elements within the subset to find the value of magic number.

For Ex:- 
subset 1 = {1, 5, 1}, 
subset 2 = {1, 7, 11}
Magic number = abs(1 - 1) + abs(5 - 7) + abs(1 - 11) = 12
Return an array B of size 2, where B[0] = maximum possible value of Magic number modulo 109 + 7, B[1] = minimum possible value of a Magic number modulo 109 + 7.



Problem Constraints
1 <= N <= 105

-109 <= A[i] <= 109

N is even



Input Format
The first argument given is the integer array A.



Output Format
Return an array B of size 2, where B[0] = maximum possible value of Magic number % 109 + 7,B[1] = minimum possible value of a Magic number % 109 + 7.



Example Input
Input 1:

 A = [3, 11, -1, 5]
Input 2:

 A = [2, 2]


Example Output
Output 1:

 [14, 10]
Output 2:

 [0, 0]



Solution Approach => 

                    1. Brute Force => Generate all the subsets possible and take out absolute difference
                        between the consecutive numbers of the 2 subsets and store it in an array and then 
                        return the max and min of the array.
                        
                        Time Complexity = O(2^N*N!)
                        Space Complexity = O(N)

                    2. Optimised => As we know we have to find the max and min finally, so we can
                        eliminate the unwanted subsets. So we can sort the array first. Then to find the 
                        max magic number we have to find the farthest pairs and for min magic number we 
                        have to find the closest pairs and sum them. Finally we can return the max and min.

                        Example = [3, 11, -1, 5]
                            After sorting = [-1, 3, 5, 11]
                            For max, pairs = [-1, 11], [3, 5] = |-1-11|+|3-5| = 14
                            So we can see that if we take the farthest pairs, we can jump on to the max 
                            difference at one go.
                            For min, pairs = [-1, 3], [5, 11] = |-1-3|+|5-11| = 10
                            So again we can see that if we take the closest pairs, then we can get the min
                            difference at one go.
                            Max=14, Min=10

                        Time Complexity = O(NlogN)
                        Space Complexity = O(1)

                        
                         