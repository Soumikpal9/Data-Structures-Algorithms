Problem Description

We have a list A, of points(x,y) on the plane. Find the B closest points to the origin (0, 0).

Here, the distance between two points on a plane is the Euclidean distance.

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)

NOTE: Euclidean distance between two points P1(x1,y1) and P2(x2,y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).



Problem Constraints

1 <= B <= length of the list A <= 100000
-100000 <= A[i][0] <= 100000
-100000 <= A[i][1] <= 100000



Input Format

The argument given is list A and an integer B.



Output Format

Return the B closest points to the origin (0, 0) in any order.



Example Input

Input 1:

 A = [ 
       [1, 3],
       [-2, 2] 
     ]
 B = 1
Input 2:

 A = [
       [1, -1],
       [2, -1]
     ] 
 B = 1


Example Output

Output 1:

 [ [-2, 2] ]
Output 2:

 [ [1, -1] ]



Solution Approach => 

                    1. Brute Force => Find the distances for each of them and store it in a hashmap
                        of distances and points/index of points and then takes the distance and store
                        it in an array and then sort the array according to their index and return 
                        first B elements of the sorted array.

                        Time Complexity = O(NlogN)
                        Space Complexity = O(N)

                    2. Optimised => Use comparator function to sort the array according to their
                        distances from the origin and return the first B elements from the sorted array.

                        Time Complexity = O(NlogN)
                        Space Complexity = O(B)


                        