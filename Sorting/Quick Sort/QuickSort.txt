Problem Description

Given an integer array A, sort the array using QuickSort.



Problem Constraints

1 <= |A| <= 105

1 <= A[i] <= 109



Input Format

First argument is an integer array A.



Output Format

Return the sorted array.



Example Input

Input 1:

 A = [1, 4, 10, 2, 1, 5]
Input 2:

 A = [3, 7, 1]


Example Output

Output 1:

 [1, 1, 2, 4, 5, 10]
Output 2:

 [1, 3, 7]



Solution Approach => 

                    Take any element from the array as pivot and place it in it's correct sorted position
                    and after that break the array into 2 pieces, one from the left of pivot and from the 
                    right of pivot. Then do the same on those smaller arrays until we reach to a point
                    where there is single element becauyse single elements are sorted in any case.

Complexity Analysis =>

                    Time Complexity => 
                                        Best Case = O(NlogN)
                                        Average Case = O(NlogN)
                                        Worst Case = O(N^2)

                    Space Complexity = O(logN)
                                        Space is due to the recursive stack.


                                        