Problem Description

Given a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integar B in matrix A.

This matrix A has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Return 1 if B is present in A, else return 0.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints

1 <= N, M <= 1000
1 <= A[i][j], B <= 106



Input Format

The first argument given is the integer matrix A.
The second argument given is the integer B.



Output Format

Return 1 if B is present in A, else return 0.



Example Input

Input 1:

A = [ 
      [1,   3,  5,  7]
      [10, 11, 16, 20]
      [23, 30, 34, 50]  
    ]
B = 3
Input 2:

A = [   
      [5, 17, 100, 111]
      [119, 120, 127, 131]    
    ]
B = 3


Example Output

Output 1:

1
Output 2:

0



Solution Approach =>

                    1. If we try to implement the conventional binary search in a matrix, then it won't
                        work. So we can do one thing to improve the algorithm, we can start from a 
                        position where we can reduce either a complete row or a complete column at each
                        step. So we can start from either top right corner or bottom left corner and 
                        reduce our search space according to the condition. If we find our target in the
                        search space will return 1 otherwise 0.

                        Time Complexity = O(N+M)
                        Space Complexity = O(1)


                        