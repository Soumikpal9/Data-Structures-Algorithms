Problem Description
Given a sorted array of integers A(0 based index) of size N, find the starting and ending position of a given integar B in array A.

Your algorithm's runtime complexity must be in the order of O(log n).

Return an array of size 2, such that first element = starting position of B in A and second element = ending position of B in A, if B is not found in A return [-1, -1].



Problem Constraints
1 <= N <= 106

1 <= A[i], B <= 109



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return an array of size 2, such that first element = starting position of B in A and second element = ending position of B in A, if B is not found in A return [-1, -1].



Example Input
Input 1:

 A = [5, 7, 7, 8, 8, 10]
 B = 8
Input 2:

 A = [5, 17, 100, 111]
 B = 3


Example Output
Output 1:

 [3, 4]
Output 2:

 [-1, -1]



Solution Approach =>

                    1. Brute Force => Linear search. Check the start and end of that particular 
                        element and return their index.

                        Time Complexity = O(N)
                        Space Complexity = O(1)

                    2. Optimised => As the array is sorted, we can use binary search to improve our
                        solution. We can find the mid and store the start and end of the target 
                        according to the conditions and simply return the start and end of the target.

                        Time Complexity = O(logN)
                        Space Complexity = O(1)


                        