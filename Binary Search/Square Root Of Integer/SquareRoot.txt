Problem Description

Given an integer A.

Compute and return the square root of A.

If A is not a perfect square, return floor(sqrt(A)).

DO NOT USE SQRT FUNCTION FROM STANDARD LIBRARY.

NOTE: Do not use sort function from standard library. Users are expected to solve this in O(log(A)) time.



Problem Constraints

0 <= A <= 1010



Input Format

The first and only argument given is the integer A.



Output Format

Return floor(sqrt(A))



Example Input

Input 1:

 11
Input 2:

 9


Example Output

Output 1:

 3
Output 2:

 3



Solution Approach =>

                    1. We can use binary search to find out the square root of the integer.
                        Search space is from 1 to N. If N=10^18 then we may come across a Problem
                        which is when we are calculating mid*mid so we can do one thing our square
                        root will always lie within 10^9 in that case so we can reduce the search space 
                        to 1 to min(N, 10^9).

                        Time Complexity = O(logN)
                        Space Complexity = O(1)


                        