Problem Description

Given a sorted array of integers A of size N and an integer B.

array A is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).

You are given a target value B to search. If found in the array, return its index, otherwise return -1.

You may assume no duplicate exists in the array.

NOTE: Users are expected to solve this in O(log(N)) time.



Problem Constraints

1 <= N <= 1000000

1 <= A[i] <= 10^9

all elements in A are disitinct.



Input Format

The first argument given is the integer array A.

The second argument given is the integer B.



Output Format

Return index of B in array A, otherwise return -1



Example Input

Input 1:

A = [4, 5, 6, 7, 0, 1, 2, 3]
B = 4
Input 2:

A = [1]
B = 1


Example Output

Output 1:

 0
Output 2:

 0



Solution Approach =>

                    1. Brute Force => Linear search

                        Time Complexity = O(N)
                        Space Complexity = O(1)

                    2. Optimised with 2 Binary Search passes => We can optimise the solution based on 
                        the fact that the array is sorted and then rotated from some point or index.
                        So, we can divide the array into 2 sorted arrays and try to find our target.
                        But the problem is we don't know the rotation index. So we first need to find 
                        the rotated index and then apply binary search on the 2 arrays. To find the rotated
                        index, we can observe that all the elements from where the array is rotated are 
                        smaleer than the first element of the array and all the elements in the left part
                        are greater than the first element. So we can apply binary search to find out the 
                        first occurence of the smaller number. This will take  us 2 binary search passes
                        to reach to our solution.

                        Time Complexity = O(logN)
                        Space Complexity = O(1)

                    3. Optimised with 1 Binary Search pass => We can further optimise the 2 passes and 
                        can use only 1 pass to solve the problem. We can find the mid element and if it 
                        is our target then return the index and if A[mid]>=A[0] then our element lies in
                        the left part of the array and if A[mid]<A[0] then right part. Now in the left 
                        part, if our element lies before the mid then B>=A[0] && B<=A[mid] and so we can
                        ignore the right part and vice versa. And in the right part if our element lies 
                        after the mid then B>=A[mid] && B<=A[n-1] and so we can ignore the left part.
                        By this we can find our target and if not present return -1.

                        Time Complexity = O(logN)
                        Space Complexity = O(1)


                        